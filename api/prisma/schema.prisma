// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  email           String            @unique()
  password        String
  isAdmin         Boolean           @default(false) @map("is_admin")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  APITokens       ApiToken[]
  ProductFeedback ProductFeedback[]
  UserCart        UserCart[]
  UserCheckout    UserCheckout[]

  @@map("users")
}

model ApiToken {
  token     String   @id
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_tokens")
}

model Product {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  description     String
  price           Int
  stock           Int
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  ProductFeedback ProductFeedback[]
  UserCart        UserCart[]
  productImages   ProductImages[]

  @@map("products")
}

model ProductFeedback {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_feedbacks")
}

model UserCart {
  productId String   @map("product_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  amount    Int
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("user_cart")
}

model UserCheckout {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  amount    Int
  data      Json     @db.Json
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_checkout")
}

model TemporaryFiles {
  id        String   @id @db.Text
  fileName  String   @db.Text
  filePath  String
  mimeType  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("temporary_files")
}

model ProductImages {
  id        String @id @db.Text
  productId String @map("product_id") @db.Uuid
  fileName  String   @db.Text
  filePath  String
  mimeType  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}
