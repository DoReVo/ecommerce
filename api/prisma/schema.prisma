// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  email           String            @unique()
  password        String
  isAdmin         Boolean           @default(false) @map("is_admin")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  APITokens       ApiToken[]
  ProductFeedback ProductFeedback[]

  @@map("users")
}

model ApiToken {
  token     String   @id
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_tokens")
}

model Product {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  description     String
  price           Int
  stock           Int
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  ProductFeedback ProductFeedback[]

  @@map("products")
}

model ProductFeedback {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_feedbacks")
}

// model Event {
//   id          String   @db.Text
//   routeId     String   @map("route_id") @db.Uuid
//   method      String   @db.Text
//   header      Json     @db.JsonB
//   body        Json     @db.JsonB
//   queryString Json     @map("query_string") @db.JsonB
//   timestamp   DateTime @default(now()) @db.Timestamptz()

//   route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

//   @@id([id, routeId], map: "composite_primary_key")
//   @@map("events")
// }
